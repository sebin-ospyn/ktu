package com.ospyn.ktu.test;

import static org.testng.AssertJUnit.assertEquals;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.ospyn.ktu.util.DriverConfig;
import com.ospyn.ktu.util.GenerateExtentReport;
import com.ospyn.ktu.util.ViewLogin;
import com.ospyn.ktu.util.Screenshot;
import com.ospyn.ktu.view.KTUWebElements;
import com.ospyn.ktu.view.ViewCourseMapping;
import com.ospyn.ktu.view.ViewInvitations;
import com.relevantcodes.extentreports.LogStatus;

public class Invitation extends DriverConfig
{
	//creating reference to ViewCourseMapping
	ViewInvitations invitationView;

	//creating reference for Login
	static ViewLogin login;

	//Creating reference for creating Extent Reports
	static GenerateExtentReport report=Login.report;

	//Creating reference for extracting  screenshots of failed tests
	Screenshot screenshot;

	//Creating static variable for adding details to log
	static String details;

	String actualValue,expectedValue;

	//Creating reference for driver 
	WebDriver driver;
	WebElement element;
	KTUWebElements webelement;

	//creating a variable for assigning the test name  before each test
	String[] testName;

	public Invitation()
	{
		/*initializing..
//			 * ExtentReport-->Using a class GenerateExtentReport class in the util package
//			 * WebDriver--->Using the DriverConfig class in the util package
//			 * 
//			 */
		driver=getDriver();
		webelement=new KTUWebElements(driver);
		report=Login.report;
		screenshot=new Screenshot();
		invitationView=new ViewInvitations(driver);

	}

	@BeforeTest
	public void getTestName(final ITestContext testContext) 
	{

		String test=testContext.getName(); // gets the test name assigned in the xml file
		testName=test.split("-");

	}


	@Test
	public void click_University_Tab()
	{
		System.out.println("Within university");
		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User clicks the University tab");
		element=webelement.getUniversity();
		element.click();

		try
		{
			Thread.sleep(1000);
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
		details="The administration side menu is displayed";

	}

	@Test
	public void click_Invitation()
	{
		System.out.println("Within invitations");

		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User clicks the Invitation option from the side menu" );
		webelement.getInvitations().click();
		try
		{
			Thread.sleep(1000);
		}
		catch(Exception e)
		{

		}
		details="The Invitations page is displayed";

	}

	@Test
	public void click_Add_Button() throws Exception 
	{

		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User clicks the Add Button" );

		WebElement add=webelement.getAdd();

		add.click();

		details="The Invitation Process Type page opens up";

	}
	@Test
	public void click_CourseSelection_Add_Button()throws InterruptedException
	{

		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User clicks the CourseSelection/Course Mapping Add button" );

		invitationView.getCourseSelection().click();

		details="Error message appears";
		Thread.sleep(1000);
	}

	@Parameters({"invitationDetails"})
	@Test
	public void enter_CourseSelection_Details(String invitationDetails)throws Exception
	{

		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User enters the Course Selection details");

		invitationView.enterDetails(invitationDetails);

		details="The details are entered";
		Thread.sleep(1000);
	}


	@Test
	public void click_Save()throws Exception
	{

		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User clicks the Save button");

		webelement.getSave().click();

		details="The details are saved";
		Thread.sleep(1000);
	}

	@Test
	public void click_Submit()throws Exception
	{

		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User clicks the Submit button");

		webelement.getSubmit().click();

		details="The details are submitted";
		Thread.sleep(1000);
	}

	@Test
	public void click_Verify()throws Exception
	{

		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User clicks the Verify button");

		webelement.getVerify().click();

		details="The invitation details are verified";
		Thread.sleep(1000);
	}
	

	@Test
	public void click_Approve()throws Exception
	{

		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User clicks the Approve button");

		webelement.getApprove().click();

		details="The invitation is approved";
		Thread.sleep(1000);
	}

	@Parameters({"invitationDetails"})
	@Test
	public void enter_Invitation_Details(String invitationDetails)throws Exception
	{
		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User enters the search details");

		actualValue=invitationView.enterSearchDetails(invitationDetails);

	}

	@Test
	public void validate_Invitation()throws Exception
	{
		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User checks whether the invitation is present or not");
		expectedValue="pass";
		System.out.println("actual value is"+actualValue);
		assertEquals(expectedValue, actualValue);
		
		details="The invitation is present";

		Thread.sleep(1000);
	}
	
	@Test
	public void validate_Duplicate()throws Exception
	{
		report.beginTest("<b>"+testName[0]+"<br />"+testName[1]+"</B><br /><br />User validates the error message when the same invitation is saved again");
		actualValue=invitationView.validateDuplicate();
		expectedValue="Invitation already exists for B.Tech Full Time(Pursuing Students)";
		System.out.println("*******"+actualValue);
		assertEquals(expectedValue, actualValue);
		details="The actual result is same as expected result";
		
		
	}
	
	@AfterMethod
	//writing the status to the report
	public void getResult(ITestResult result)
	{ 
		//if the testing is a failure
		if(result.getStatus()==ITestResult.FAILURE)
		{

			//Using details of date and time for naming the screenshot

			String dateName = new SimpleDateFormat("ddMMyyyy_hhmmss").format(new Date());

			//capturing screenshot of the failed method
			String screenshotName=result.getMethod().getMethodName()+"-"+dateName+".jpg";

			screenshot.captureScreenshot(screenshotName, driver);

			//Adding screenshot to the report for the failed test
			report.addScreenShotToLog(System.getProperty("user.dir")+"/Screenshots/"+screenshotName);
		}

		//if testing is successful
		else if(result.getStatus()==ITestResult.SUCCESS)
		{
			report.setLog(LogStatus.PASS, details);
		}

		//if testing is skipped
		else if(result.getStatus()==ITestResult.SKIP)
		{
			report.setLog(LogStatus.SKIP, "Skipped");
		}
		//Ending the test
		report.endTest();

	}
	@AfterSuite
	public void endTest() throws IOException
	{
		//closing the report
		report.endReport();

		//Renaming the report by adding date and time to the report
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd_MM_yyyy_HH:mm:ss");  
		LocalDateTime now = LocalDateTime.now(); 

		File oldFile=new File(System.getProperty("user.dir")+"/target/Report.html");

		String fileName=System.getProperty("user.dir")+"/target/CourseMapping_"+dtf.format(now)+".html";
		File newFile=new File(fileName);

		//Renaming the report with new name 

		System.out.println(oldFile.renameTo(newFile));

		//Opening the report
		Desktop.getDesktop().browse(new File(fileName).toURI());
	}
}



