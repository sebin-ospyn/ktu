package com.ospyn.ktu.util;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Timer;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.ElementClickInterceptedException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class ViewCommonUtil extends SeleniumBase{

	public ViewCommonUtil(WebDriver driver) {
		super(driver);
		// TODO Auto-generated constructor stub
	}
	public static Map<String,String> excelParameters=new HashMap<String, String>();
	// return the value of a parameter defined in test data sheet.
	public static String getExcelParameters(String param) {
		//return excelParameters;
		return(excelParameters.get(param));
	}

	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used to read the values from test data excel sheet which is in format of parameter name and value
	 * @param : strExcelFileName - name of excel spreadsheet with full path and extension
	 * 			strSheetName     - name of the sheet to be referred for accessing parameters
	 * @return : none
	 * 
	 */
	public static void readFromExcel(String strExcelFileName, String strSheetName) throws Exception

	{


		FileInputStream fs = new FileInputStream(new File(System.getProperty("user.dir")+"/Test_Data/"+strExcelFileName));


		//Getting the workbook

		XSSFWorkbook workbook1 = new XSSFWorkbook(fs) ;
		DataFormatter formatter = new DataFormatter(); //creating formatter using the default locale


		//Getting the sheet
		try {
			XSSFSheet sheetx = workbook1.getSheet(strSheetName);

			try {


				for(int tableIndex=0;tableIndex<sheetx.getPhysicalNumberOfRows();tableIndex++){

					if(sheetx.getRow(tableIndex).getCell(1)!=null)
					{

						switch (sheetx.getRow(tableIndex).getCell(1).getCellType()) {
						case STRING:
							excelParameters.put(sheetx.getRow(tableIndex).getCell(0).getStringCellValue().trim(),sheetx.getRow(tableIndex).getCell(1).getStringCellValue());
							break;
						case NUMERIC:
							String strVal=formatter.formatCellValue(sheetx.getRow(tableIndex).getCell(1));
							excelParameters.put(sheetx.getRow(tableIndex).getCell(0).getStringCellValue().trim(),strVal);
							break;

						default:
							System.out.println("Unknown cell type");
							break;	

						}
					}
				}
			}
			catch(NullPointerException e) {
				System.out.println("Check row details");
			}

		}
		catch(NullPointerException e) {
			System.out.println("Sheet Name Invalid!!");
		}
		workbook1.close();


	}	

	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used to select the value from a drop down list 
	 * @param : parameterNameinDataSheet - name of parameter name defined in excel sheet
	 * 			strLocator     - locator used to identify drop down webelement.
	 * @return : none
	 */

	public static void selectDropDownItem(String parameterNameinDataSheet,String strLocator)throws Exception {

		WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(strLocator)));
		Select dropdown = new Select(element);
		dropdown.selectByVisibleText(excelParameters.get(parameterNameinDataSheet));
		Thread.sleep(2000);

	}
	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used to enter a text value in a text box field in application
	 * @param : parameterNameinDataSheet - name of parameter name defined in excel sheet
	 * 			strLocator     - locator used to identify drop down webelement.
	 * @return : none
	 */

	public static void enterTextinTextField(String parameterNameinDataSheet,String strLocator)throws Exception{

		WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(strLocator)));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
		element.sendKeys(excelParameters.get(parameterNameinDataSheet));
		Thread.sleep(2000);

	}
	/**  
	 * @author u1598
	 * @date 01/07/2024
	 * @description : Method is used to enter a string value 
	 * @param : textValue - value to be entered in text field
	 * 			strLocator     - locator used to identify drop down webelement.
	 * @return : none
	 */

	public static void enterStringValueinTextField(String excelValueStoredString , String strLocator) throws Exception {
		WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(strLocator)));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(false);", element);
		
		element.clear();
		element.sendKeys(excelValueStoredString);
		Thread.sleep(300);
	}

	/**  
	 * @author u1598
	 * @date 01/07/2024
	 * @description : Method is used to select the value from a drop down list 
	 * @param : textData - text data to be selected from drop down list
	 * 			strLocator     - locator used to identify drop down webelement.
	 * @return : none
	 */

	public static void selectStringDropDownItem(String textData , String strLocator ) {
		try {
		WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(strLocator)));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
		//element.click();		
		Select dropdown = new Select(element);		
		dropdown.selectByVisibleText(textData);
		Thread.sleep(300);
		}
		catch(Exception e){
			System.out.println("exception="+e);
			
		}
		

	}

	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used to click on a webelement where we handled interception errors and set focus issue
	 * @param : strLocator     - locator used to identify drop down webelement.
	 * @return : none
	 */


	public static void click(String strLocator) {
		WebDriverWait wait = new WebDriverWait(driver, 10);
		WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(strLocator)));
		//WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(strLocator)));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);

		if (element.isEnabled()) {
			try {
				element.click();
			} catch (ElementClickInterceptedException e) {
				// Use JavaScript to click if normal click is intercepted


				((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
			}
		}
	}
	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used to write a new value or update an existing value in excel sheet against a parameter name
	 * @param : strExcelFileName     - Name of the excel spreadsheet with extension.
	 * 			strSheetName - name of the sheet to be referred
	 * 			fieldName - name of the parameter against which the data to be added/updated 
	 * 			strData - data to be updated 
	 * @return : none
	 */


	public static void writeToExcel(String strExcelFileName, String strSheetName,String fieldName, String strData) throws Exception {

		boolean bFieldNamefound=false;
		FileInputStream fs = new FileInputStream(new File(System.getProperty("user.dir")+"/Test_Data/"+strExcelFileName));

		XSSFWorkbook workbook = new XSSFWorkbook(fs) ;

		//Getting the sheet
		try {
			XSSFSheet sheet = workbook.getSheet(strSheetName);

			try {
				for(int tableIndex=0;tableIndex<sheet.getPhysicalNumberOfRows();tableIndex++){
					if(sheet.getRow(tableIndex).getCell(0).getStringCellValue().equals(fieldName)) {
						if(sheet.getRow(tableIndex).getCell(1)==null) {
							sheet.getRow(tableIndex).createCell(1);
						}
						sheet.getRow(tableIndex).getCell(1).setCellValue(strData);					 
						System.out.println("data written in excel sheet"+strData);


						bFieldNamefound=true;
						break;
					}
				}

				if(!bFieldNamefound){
					System.out.println(fieldName+" not found in datasheet >"+strSheetName); 

				}
			}
			catch(Exception e) {
				System.out.println("Check row details");
			}

		}
		catch(NullPointerException e) {
			System.out.println("Sheet Name Invalid!!");
		}
		fs.close();
		FileOutputStream fs2 = new FileOutputStream(new File(System.getProperty("user.dir")+"/Test_Data/"+strExcelFileName));
		workbook.write(fs2);
		fs2.close();
		workbook.close();

	}

	/**  
	 * @author u1598
	 * @date 01/07/2024
	 * @description : Method is used to enter a part of text field  
	 * @param : 
	 * 			fieldName - name of the parameter against which the data to be added/updated 
	 * 			strLocator - locator of the webelement
	 * 			index - position index
	 * @return : none
	 */

	public static void splitAndEnter(String fieldName,String strLocator,int index ) throws InterruptedException, AWTException {

		WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(strLocator)));
		String fieldVal=excelParameters.get(fieldName);
		String[] valueAfterSplit= fieldVal.split(" ");
		Thread.sleep(2000);
		element.sendKeys(valueAfterSplit[index]); 
		Thread.sleep(2000);
		Robot robot=new Robot();
		robot.keyPress(KeyEvent.VK_ENTER); 
		robot.keyRelease(KeyEvent.VK_ENTER);

	}

	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used to read a value form excel based on column header and row index
	 * @param : strExcelFileName     - Name of the excel spreadsheet with extension.
	 * 			strSheetName - name of the sheet to be referred
	 * 			columnHeader - name of column header
	 * 			rowindex - row index
	 * @return : column value
	 */

	public static String readExcelColumHeader(String strExcelFileName, String strSheetName,String columnHeader,int rowindex) throws Exception

	{
		System.out.println("strSheetName="+strSheetName);
		String columnValue =null;
		FileInputStream fs = new FileInputStream(new File(System.getProperty("user.dir")+"/Test_Data/"+strExcelFileName));


		//Getting the workbook

		XSSFWorkbook workbook1 = new XSSFWorkbook(fs) ;

		//Getting the sheet
		try {
			XSSFSheet sheetx = workbook1.getSheet(strSheetName);
			Row headerRow = sheetx.getRow(0);
			Map<String, Integer> columnMap = new HashMap<>();
			for (Cell cell : headerRow) {
				columnMap.put(cell.getStringCellValue(), cell.getColumnIndex());
			}

			try {


				columnValue = getCellValue(sheetx.getRow(rowindex), columnMap, columnHeader).toString();
				System.out.println(columnHeader+": " +rowindex+"="+columnValue);


			}
			catch(NullPointerException e) {
				System.out.println("Check row details");
			}

		}
		catch(NullPointerException e) {
			System.out.println(e+"Sheet Name Invalid!!");
		}
		workbook1.close();

		return columnValue;
	}	
	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used to read the cell value
	 * @param : row     - row object
	 * 			columnMap 
	 * 			columnName
	 * 			
	 * @return : cell value
	 */

	private static String getCellValue(Row row, Map<String, Integer> columnMap, String columnName) {
		int columnIndex = columnMap.getOrDefault(columnName, -1);
		if (columnIndex == -1) {
			return null;
		}
		Cell cell = row.getCell(columnIndex);
		if (cell == null) {
			return null;
		}

		switch (cell.getCellType()) {
		case STRING:
			return cell.getStringCellValue();
		case NUMERIC:
			if (DateUtil.isCellDateFormatted(cell)) {
				return cell.getDateCellValue().toString();
			} else {
				//return String.valueOf(cell.getNumericCellValue());

				return String.format("%.0f", cell.getNumericCellValue());
			}
		case BOOLEAN:
			return String.valueOf(cell.getBooleanCellValue());
		case FORMULA:
			return cell.getCellFormula();
		default:
			return null;
		}
	}


	/**  
	 * @author u1598
	 * @date 01/07/2024
	 * @description : Method is used to enter a part of text field  
	 * @param : 
	 * 			fieldName - name of the parameter against which the data to be added/updated 
	 * 			strLocator - locator of the webelement
	 * 			index - position index
	 * @return : none
	 */


	public static void checkBox(String excelValueStoredString,String Locator) throws Exception, InterruptedException {
		if (excelValueStoredString.equals("Yes")) {
			WebElement element =wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Locator)));
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].click();", element);
			Thread.sleep(1000);
		}

	}



	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used add the attachment name 
	 * @param : parameterNameinDataSheet     - attachment filed name
	 * 			strLocator -locator if <input type=file..> element
	 * 			
	 * 			
	 * @return : none
	 */
	public static void browseAttachment(String filename,String strLocator)throws Exception{

		String strFullFileName=System.getProperty("user.dir")+"/Test_Data/"+filename;
		WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(strLocator)));

		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);

		element.sendKeys(strFullFileName);
		Thread.sleep(2000);
	}

	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used generate an 'n' digit random number
	 * @param : range     - number of digit to be generated
	 * 			

	 * @return : randomGeneratedString
	 */

	public static String randomNumberGenerator(int range) {
		Random random = new Random();


		// Generate a 16-digit number
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < range; i++) {
			int digit = random.nextInt(10); // Generate a random digit between 0 and 9
			sb.append(digit);
		}

		// Convert StringBuilder to String
		String randomGeneratedString = sb.toString();
		if(randomGeneratedString.charAt(0)=='0'){
			// Replace the first character
			randomGeneratedString = '9' + randomGeneratedString.substring(1);
		}

		System.out.println("randomDigitNumber="+randomGeneratedString);

		return randomGeneratedString;

	}
	/**  
	 * @author u1756
	 * @date 01/07/2024
	 * @description : Method is used generate an 'n' character string 
	 * @param : range     - number of character to be generated
	 * 			

	 * @return : randomGeneratedString
	 */
	public static String randomStringGenerator(int range) {

		String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
		Random random = new Random();

		// Generate a n-letter random name
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < range; i++) {
			int index = random.nextInt(alphabet.length());
			sb.append(alphabet.charAt(index));
		}


		// Convert StringBuilder to String
		String randomGeneratedString = sb.toString();
		System.out.println("randomGeneratedString="+randomGeneratedString);

		return randomGeneratedString;


	}

	/**  
	 * @author u1756
	 * @date 25/07/2024
	 * @description : Method is used for page load
	 * @param : none
	 * 			

	 * @return : none
	 * @throws InterruptedException 
	 */

	//	public static void waitforPageLoad()
	//	{
	//		try {
	//			new WebDriverWait(driver, 30).until((ExpectedCondition<Boolean>) wd ->((JavascriptExecutor) wd).executeScript("return document.readyState").equals("complete"));
	//		}
	//		catch(Exception e)
	//		{
	//			System.out.print(e);
	//		}
	//
	//	}
	//
	//}

	

	public static void waitforPageLoad(String currPageUrl)
	{
		try {
			System.out.println("wait funtcion="+currPageUrl);		
			boolean bflag=false;
			Timer timer= new Timer();
			int seconds=0;
			
			do {
				System.out.println("seconds"+seconds);
				 Thread.sleep(1000);
			
				
				 if(driver.getCurrentUrl().contains(currPageUrl)) {
					bflag=true;
				 }
				
				if(seconds>120)	{
					bflag=true;
				}
				seconds++;
				
			}while(!bflag);
			
			 
				WebDriverWait webDriverWait = new WebDriverWait(driver, 50);
			
			    webDriverWait.until((ExpectedCondition<Boolean>) wd ->
			        ((JavascriptExecutor) wd).executeScript("return document.readyState").equals("complete"));

			    webDriverWait.until((ExpectedCondition<Boolean>) wd ->
			        ((JavascriptExecutor) wd).executeScript("return jQuery.active==0").equals(true));
			  
		}
		catch(Exception e)
		{
			System.out.print(e);
		}
		
	}
	
	/**  
	 * @author u1598
	 * @date 04/08/2024
	 * @description : Method is used to login
	 * @param : 
	 * 			userName - user name of the user
	 * 			password - password of the user
	 * @return : none
	 */
	
	public static void logIn(String userName ,String password) throws Exception {


		//passing user name
		
		ViewCommonUtil.enterTextinTextField( userName, "//input[@id='login-username']");

		//passing password
	
		ViewCommonUtil.enterTextinTextField( password, "//input[@id='login-password']");
		Thread.sleep(1500);
		//click login
		ViewCommonUtil.click("//input[@id='btn-login']");
		Thread.sleep(1500);
		driver. navigate(). refresh();

	}
	
	
	
	
	
	
	
	
	
	
	
	
}